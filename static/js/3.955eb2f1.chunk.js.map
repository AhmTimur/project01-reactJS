{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","ProfileDataReduxForm","reduxForm","form","profile","handleSubmit","error","onSubmit","className","styles","formCommonError","createField","Input","Textarea","s","contacts","keys","map","key","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","sendPhoto","saveProfileData","Preloader","descriptionBlock","avatar","src","photos","large","type","target","files","initialValues","profileData","then","Post","item","message","likesCount","AddNewPostReduxForm","required","MyPostsMemorized","React","memo","postElement","posts","reverse","p","id","postsBlock","values","addNewPost","newPostText","MyPostsContainer","connect","state","profilePage","actions","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.955eb2f1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content_img\":\"ProfileInfo_content_img__1UmmN\",\"item\":\"ProfileInfo_item__1wD8h\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1K-RV\",\"avatar\":\"ProfileInfo_avatar__1rJ1k\",\"status\":\"ProfileInfo_status__TXkqB\",\"contacts\":\"ProfileInfo_contacts__1BvWc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__25x64\",\"posts\":\"MyPosts_posts__1AiDp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1nWSQ\"};","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, {useState, useEffect, FC, ChangeEvent} from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (newStatus: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: FC<PropsType> = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateMode = () => {\r\n         setEditMode(true)\r\n    }\r\n    const deActivateMode = () => {\r\n         setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateMode}>{props.status || \"set a status message\"}</span>\r\n            </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus={true} onBlur={deActivateMode} onChange={onStatusChange} value={status}/>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {createField, GetFormDataKeys, Input, Textarea} from \"../../Common/FormsControl/FormsControl\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport styles from \"../../Common/FormsControl/FormsControl.module.css\";\r\nimport {ProfileType} from \"../../../types/Types\";\r\n\r\ntype ProfileOnwPropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileFormDataKeysType = GetFormDataKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, ProfileOnwPropsType> & ProfileOnwPropsType> = ({profile, handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {error && <div className={styles.formCommonError}><span>{error}</span></div>}\r\n            <div><button>Save</button></div>\r\n            <div>\r\n                <b>FullName</b>: {createField<ProfileFormDataKeysType>('FullName','fullName', '', Input, [])}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {createField<ProfileFormDataKeysType>('','lookingForAJob', 'checkbox', Input, [],)}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>: {createField<ProfileFormDataKeysType>('My professional skills','lookingForAJobDescription', 'checkbox', Textarea, [],)}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: {createField<ProfileFormDataKeysType>('About me', 'aboutMe', '', Textarea, [], {})}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>:\r\n                <div className={s.contacts}>{Object.keys(profile.contacts).map(key => {\r\n                    return <div key={key}>\r\n                        <b>{key}</b>: {createField(key, 'contacts.'+key, '', Input, [])}\r\n                    </div>\r\n                })}</div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ProfileDataReduxForm = reduxForm<ProfileType, ProfileOnwPropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\n","import React, {useState, FC, ChangeEvent} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport {ProfileDataReduxForm} from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/Types\";\r\n\r\nconst ProfileInfo: FC<PropsType> = ({profile, status, updateStatus, sendPhoto, isOwner, saveProfileData}) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => { // Исправить тут и ниже\r\n        if (e.target.files && e.target.files.length) {\r\n            sendPhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (profileData: ProfileType) =>{\r\n        saveProfileData(profileData).then(()=>{\r\n            setEditMode(false)\r\n        });\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <img className={s.avatar}\r\n                         src={profile.photos.large != null ? profile.photos.large : \"https://vectorified.com/images/no-profile-picture-icon-13.png\"}/>\r\n                    {isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n                </div>\r\n                {editMode\r\n                    ? <div><ProfileDataReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit}/></div>\r\n                    : <div><ProfileData profile={profile} status={status} updateStatus={updateStatus} isOwner={isOwner} goToEditMode={()=>{setEditMode(true)}}/></div>}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData: FC<ProfileDataType> = ({profile, isOwner, goToEditMode, status, updateStatus}) => {\r\n    return <div>\r\n        {isOwner && <div><button onClick={goToEditMode}>Edit</button></div>}\r\n        <div>\r\n            <b>FullName</b>: {profile.fullName}\r\n        </div>\r\n        <div className={s.status}>\r\n            <b>Status</b>:<ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"Yes\" : \"No\"}\r\n        </div>\r\n        {profile.lookingForAJob && <div><b>My professional skills</b>: {profile.lookingForAJobDescription}</div>}\r\n        <div><b>About me</b>: {profile.aboutMe}</div>\r\n        <div>\r\n            <b>Contacts</b>:\r\n            <div className={s.contacts}>{Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n            })}</div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport const Contact = ({contactTitle, contactValue}: ContactType) => {\r\n    return <div><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\n\r\nexport default ProfileInfo;\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: () => void\r\n    sendPhoto: (file: File) => void\r\n    isOwner: boolean\r\n    saveProfileData: (profileData: ProfileType) => Promise<any>\r\n}\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: () => void\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n\r\n}\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props: {message: string, likesCount: number}) => {\r\n  return <div className={s.item}>\r\n    <img src='https://www.w3schools.com/howto/img_avatar.png' />\r\n    {props.message}\r\n        <div>\r\n      <span>Likes {props.likesCount}</span>\r\n    </div>\r\n  </div>\r\n\r\n\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport {createField, GetFormDataKeys, Input} from \"../../../Common/FormsControl/FormsControl\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {required} from \"../../../../utils/validators/validators\";\r\n\r\nexport type PostFormDataType = {\r\n    newPostText: string\r\n}\r\ntype PostFormDataKeysType = GetFormDataKeys<PostFormDataType>\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<PostFormDataType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            {createField<PostFormDataKeysType>('Write your post text', 'newPostText', '', Input, [required])}\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const AddNewPostReduxForm = reduxForm<PostFormDataType>({form: 'ProfileAddNewPost'})(AddNewPostForm)","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {PostsType} from \"../../../types/Types\";\r\nimport {AddNewPostReduxForm, PostFormDataType} from \"./AddNewPostForm/AddNewPostForm\";\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    let postElement = [...props.posts].reverse().map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    let addNewPost = (values: PostFormDataType) => {\r\n        props.addNewPost(values.newPostText)\r\n    }\r\n\r\n    return <div className={s.postsBlock}>\r\n        <h3>My posts</h3>\r\n        <div>\r\n            <AddNewPostReduxForm onSubmit={addNewPost}/>\r\n        </div>\r\n        <div className={s.posts}>\r\n            {postElement}\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport const MyPostsMemorized = React.memo(MyPosts)\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostsType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addNewPost: (newPostText: string)=> void\r\n}","import React from 'react';\r\nimport {DispatchPropsType, MapPropsType, MyPostsMemorized} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {addNewPost: actions.addNewPost})(MyPostsMemorized);\r\n\r\nexport default MyPostsContainer;","import React, {FC} from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../types/Types\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: () => void\r\n    sendPhoto: () => void\r\n    saveProfileData: (profileData: ProfileType) => Promise<void>\r\n}\r\n\r\nconst Profile: FC<PropsType> = (props) => {\r\n    return <div>\r\n        <ProfileInfo isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} sendPhoto={props.sendPhoto} saveProfileData={props.saveProfileData}/>\r\n        <MyPostsContainer/>\r\n    </div>\r\n\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {getStatus, getUserProfile, updateStatus, sendPhoto, saveProfileData} from '../../redux/profile-reducer';\r\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/Types\";\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: () => void\r\n    sendPhoto: () => void\r\n    saveProfileData: () => Promise<void>\r\n\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype OwnProps = {\r\n    profile: ProfileType\r\n}\r\n\r\ntype PropsType = MapDispatchPropsType & MapStatePropsType & RouteComponentProps<PathParamsType> & OwnProps\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n        }\r\n        if (!userId) {\r\n            console.error(\"ID should exists in params or in state ('authorizedId')\")\r\n        } else {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getStatus(userId);\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: AppStateType) {\r\n        if (prevProps.match.params.userId != this.props.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     sendPhoto={this.props.sendPhoto}\r\n                     saveProfileData={this.props.saveProfileData}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, sendPhoto, saveProfileData}),\r\n    withRouter,\r\n)(ProfileContainer) as React.ComponentType;"],"sourceRoot":""}