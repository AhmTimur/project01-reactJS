{"version":3,"sources":["api/profile-api.ts","redux/profile-reducer.ts","assets/userPhoto.png","redux/dialogs-reducer.ts","assets/35.svg","components/Navbar/Navbar.module.css","components/Common/FormsControl/FormsControl.tsx","serviceWorker.js","components/Navbar/Navbar.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","utils/object-helper.ts","api/users-api.ts","redux/users-reducer.ts","redux/users-selectors.ts","components/Users/Users.tsx","components/Users/UsersPage.tsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/WithSuspense.tsx","App.tsx","index.tsx","components/Common/Preloader/Preloader.tsx","utils/validators/validators.ts","components/Common/FormsControl/FormsControl.module.css","components/Users/Users.module.css","components/Common/Paginator/Paginator.module.css","api/api.ts","components/Header/Header.module.css"],"names":["profileAPI","userId","instance","get","then","res","data","status","put","file","formData","FormData","append","headers","profileData","initialState","posts","id","message","likesCount","profile","actions","addNewPost","newPostText","type","setUserProfile","setStatus","deletePost","postId","sendPhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","ResultCodesEnum","Success","sendPhoto","saveProfileData","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","filter","p","module","exports","dialogs","name","addMessage","messageText","dialogsReducer","Element","input","meta","touched","error","props","hasError","className","styles","formControl","Textarea","Input","createField","placeholder","component","validators","text","Boolean","window","location","hostname","match","Navbar","s","nav","nav_text","item","to","activeClassName","activeLink","active","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","login","isAuth","payload","getAuthUserData","getCaptchaUrl","url","authReducer","Header","header","src","loginBlock","onClick","LogOut","HeaderContainer","this","React","Component","connect","News","Music","Settings","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPageNumberInPortion","rightPageNumberInPortion","paginator","map","cn","selectedPage","pageNumber","key","e","User","followingInProgress","follow","unfollow","user","photo","small","userPhoto","followed","disabled","some","usersSearchFormValidate","values","UsersSearchForm","memo","initialValues","term","friend","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","value","updateObjectInArray","users","objPropName","newObjProps","u","usersAPI","getUsers","totalCount","isFetching","usersRequest","page","items","usersReducer","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getFilter","Users","useSelector","useDispatch","useEffect","UsersPage","Preloader","maxLength50","maxlengthCreator","LoginReduxForm","reduxForm","form","handleSubmit","required","formCommonError","Login","ResultCodeForCaptchaEnum","CaptchaIsRequired","length","LogIn","initialized","appReducer","sidebarReducer","rootReducer","combineReducers","profilePage","messagePage","sidebar","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","WithSuspenseDialog","WithSuspenseProfile","App","catchAllUnhandledErrors","alert","initializedApp","addEventListener","removeEventListener","exact","path","render","AppContainer","withRouter","promise","all","AppContainerWrap","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","preloader","maxLength","axios","create","withCredentials","baseURL"],"mappings":"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","file":"static/js/main.309665c1.chunk.js","sourcesContent":["import {ProfileType} from \"../types/Types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SendPhotoDataType = {\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data)\r\n    },\r\n    updateProfileStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data)\r\n    },\r\n    sendPhoto(file: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"Image\", file)\r\n        return instance.put<APIResponseType<SendPhotoDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    saveProfileData(profileData: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profileData).then(res => res.data)\r\n    }\r\n}","import {ResultCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostsType, ProfileType} from \"../types/Types\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport {BaseThunkType, InferActionsType} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hello, what is your name?', likesCount: 20},\r\n        {id: 2, message: 'Hi, my name is Bob', likesCount: 15}\r\n    ] as Array<PostsType>,\r\n    profile: null as ProfileType | null,\r\n    status: ''\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"BN/PROFILE/ADD-POST\":\r\n            let newPostText = {\r\n                id: 3,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n            ...state,\r\n                posts: [...state.posts, newPostText]\r\n            };\r\n        case \"BN/PROFILE/SET-USER-PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case \"BN/PROFILE/SET-STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case \"BN/PROFILE/DELETE_POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id != action.postId)\r\n            }\r\n        case \"BN/PROFILE/UPDATE-USER-PHOTO\":\r\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addNewPost: (newPostText: string) => ({ type: 'BN/PROFILE/ADD-POST', newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({ type: 'BN/PROFILE/SET-USER-PROFILE', profile } as const),\r\n    setStatus: (status: string) => ({ type: 'BN/PROFILE/SET-STATUS', status } as const),\r\n    deletePost: (postId: number) => ({ type: 'BN/PROFILE/DELETE_POST', postId } as const),\r\n    sendPhotoSuccess: (photos: PhotosType) =>({type: 'BN/PROFILE/UPDATE-USER-PHOTO', photos} as const)\r\n}\r\n\r\n\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n        dispatch(actions.setUserProfile(data));\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async(dispatch) => {\r\n    let data = await profileAPI.getStatus(userId);\r\n            dispatch(actions.setStatus(data))\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.updateProfileStatus(status);\r\n        if(data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(actions.setStatus(status));\r\n        }\r\n}\r\nexport const sendPhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.sendPhoto(file);\r\n    if(data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.sendPhotoSuccess(data.data.photos))\r\n    }\r\n}\r\nexport const saveProfileData = (profileData: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.id;\r\n    const data = await profileAPI.saveProfileData(profileData);\r\n\r\n    if(data.resultCode === ResultCodesEnum.Success) {\r\n        if(userId != null) {\r\n            dispatch(getUserProfile(userId));\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    }else{\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}))\r\n    return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","module.exports = __webpack_public_path__ + \"static/media/userPhoto.3d1c93dd.png\";","import {InferActionsType} from \"./redux-store\";\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Timur'},\r\n        {id: 2, name: 'Sasha'},\r\n        {id: 3, name: 'Pasha'}\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: 'hi'},\r\n        {id: 2, message: 'Yo'},\r\n        {id: 3, message: 'How are you doing'},\r\n    ]as Array<MessageType>\r\n}\r\n\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"BN/DIALOGS/ADD-MESSAGE\":\r\n            let messageText = action.messageText;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 4, message: messageText}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addMessage: (messageText: string) => ({type: 'BN/DIALOGS/ADD-MESSAGE', messageText} as const)\r\n}\r\n\r\n\r\nexport default dialogsReducer;\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>","module.exports = __webpack_public_path__ + \"static/media/35.5ee8137e.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2w-uP\",\"activeLink\":\"Navbar_activeLink__1jmCw\",\"nav_text\":\"Navbar_nav_text__1bNX2\",\"item\":\"Navbar_item__2GGzM\"};","import React from \"react\";\r\nimport styles from './FormsControl.module.css'\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\nimport {FormValidatorType} from \"../../../utils/validators/validators\";\r\n\r\nconst Element = (Element: React.FC | string): React.FC<WrappedFieldProps> => ({input, meta: {touched, error}, ...props}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <Element {...input} {...props}/>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea = Element('textarea')\r\n\r\nexport const Input = Element('input')\r\n\r\nexport function createField<FormKeys extends string> (placeholder: string | undefined, name: FormKeys, type: string, component: React.FC<WrappedFieldProps>, validators: Array<FormValidatorType>, props={}, text ='') {\r\n    return(\r\n        <div> {text}\r\n            <Field placeholder={placeholder} name={name} type={type} component={component} validators={validators}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport type GetFormDataKeys<T> = Extract<keyof T, string>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n  return <nav className={s.nav}>\r\n    <div className={s.nav_text}>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n      </div>\r\n      <div className={`${s.item} ${s.active}`}>\r\n        <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n      </div>\r\n\r\n    </div>\r\n  </nav>\r\n}\r\n\r\nexport default Navbar;","import {APIResponseType, instance, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n        id: number\r\n        email: string\r\n        login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    id: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    logIn(email: string, password: string, rememberMe: boolean, captcha: string) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data)\r\n    },\r\n    logOut() {\r\n        return instance.delete<APIResponseType>(`auth/login`).then(res => res.data)\r\n    }\r\n}","import {instance} from \"./api\";\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<{url: string}>(`security/get-captcha-url`).then(res => res.data)\r\n\r\n    }\r\n}","import {ResultCodesEnum, ResultCodeForCaptchaEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\nimport {BaseThunkType, InferActionsType} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captcha: null as string | null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"BN/auth/SET_USER_DATA\":\r\n        case \"BN/auth/GET_CAPTCHA_URL_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (id: number| null, email: string| null, login: string| null, isAuth: boolean) => ({type: 'BN/auth/SET_USER_DATA', payload: {id, email, login, isAuth}} as const),\r\n    getCaptchaUrlSuccess: (captcha: string) => ({type: 'BN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captcha}} as const)\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.me();\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        let {id, email, login} = data.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const LogIn = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.logIn(email, password, rememberMe, captcha);\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(getAuthUserData());\r\n    } else{\r\n        if(data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n\r\n    }\r\n\r\nexport const LogOut = (): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.logOut();\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl();\r\n    dispatch(actions.getCaptchaUrlSuccess(data.url))\r\n}\r\n\r\n\r\nexport default authReducer;\r\n\r\ntype InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type MapPropsType = {\r\n  isAuth: boolean\r\n  login: string | null\r\n}\r\nexport type DispatchPropsType = {\r\n  LogOut: () => void\r\n}\r\nconst Header: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n  return <header className={s.header}>\r\n    <img src='https://lofrev.net/wp-content/photos/2017/03/bower_logo_1.png' />\r\n    <div className={s.loginBlock}>\r\n      {props.isAuth\r\n          ? <div>{props.login} - <button onClick={props.LogOut}>Log out</button> </div>\r\n          : <NavLink to={'/login'}>Login</NavLink>}\r\n\r\n    </div>\r\n  </header>\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport {LogOut} from '../../redux/auth-reducer';\r\nimport {connect} from 'react-redux';\r\nimport Header, {MapPropsType, DispatchPropsType} from './Header';\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nclass HeaderContainer extends React.Component<MapPropsType& DispatchPropsType> {\r\n  render() {\r\n    return <Header {...this.props}/>\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {LogOut})(HeaderContainer);","import React from 'react';\r\nimport s from './News.module.css';\r\n\r\nconst News = (props: {}) => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from 'react';\r\n\r\nconst Music = (props: {}) => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\n\r\n\r\nconst Settings= (props: {}) => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import styles from \"./Paginator.module.css\";\r\nimport React, {useState} from \"react\";\r\nimport cn from \"classnames\"\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    onPageChanged?: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nexport const Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage = 1, onPageChanged = x => x, portionSize = 10}) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount/portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    let leftPageNumberInPortion = (portionNumber - 1) * portionSize + 1;\r\n    let rightPageNumberInPortion = portionNumber * portionSize;\r\n\r\n    return <div className={styles.paginator}>\r\n        { portionNumber > 1 && <button onClick={()=> {setPortionNumber(portionNumber -1)}}>Prev</button>}\r\n            {pages\r\n                .filter(p => p <= rightPageNumberInPortion && p >= leftPageNumberInPortion)\r\n                .map((p) => {\r\n                    return <span className={cn({[styles.selectedPage]: currentPage === p}, styles.pageNumber)}\r\n                                 key={p}\r\n                                 onClick={(e) => {onPageChanged(p)}}>\r\n                            {p}</span>\r\n                })\r\n            }\r\n        {portionCount > portionNumber && <button onClick={()=> {setPortionNumber(portionNumber + 1)}}>Next</button>}\r\n    </div>\r\n}","import {NavLink} from 'react-router-dom'\r\nimport styles from './Users.module.css'\r\nimport userPhoto from '../../assets/userPhoto.png'\r\nimport React from 'react'\r\nimport {UserType} from '../../types/Types'\r\n\r\ntype PropsType = {\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    user: UserType\r\n}\r\n\r\nconst User: React.FC<PropsType> = ({followingInProgress, follow, unfollow, user}) => {\r\n    return (\r\n        <div>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={`profile/${user.id}`}>\r\n                        <img className={styles.photo}\r\n                             src={user.photos.small != null ? user.photos.small : userPhoto}/>\r\n                    </NavLink>\r\n\r\n                </div>\r\n                <div>\r\n                    {user.followed\r\n                        ? <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                            unfollow(user.id)\r\n                        }}>Unfollow </button>\r\n                        : <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                            follow(user.id)\r\n                        }}>Follow </button>\r\n                    }\r\n\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <span>\r\n                    <span>\r\n                        {user.name}\r\n                    </span>\r\n                    <div>\r\n                        {user.status}\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <div>\r\n                        {'user.location.country'},\r\n                    </div>\r\n                    <div>\r\n                        {'user.location.city'}\r\n                    </div>\r\n                </span>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User","import {Field, Form, Formik} from 'formik'\r\nimport React from 'react'\r\nimport {FilterType} from '../../redux/users-reducer'\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {}\r\n    return errors\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\ntype FormType = {\r\n    term: string,\r\n    friend: 'null' | 'true'| 'false'\r\n}\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const submit = (values: FormType, {setSubmitting}: {setSubmitting: (isSubmitting: boolean) => void} ) => {\r\n        debugger\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true :  false\r\n        }\r\n\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n    return <div>\r\n        <Formik\r\n            initialValues={{term: '', friend: 'null'}}\r\n            validate={ usersSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    <Field type=\"input\" name=\"term\"/>\r\n                    <Field name=\"friend\" as=\"select\">\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Only followed</option>\r\n                        <option value=\"false\">Only unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n})","export const updateObjectInArray = (users: any, userId: any, objPropName: any, newObjProps: any) => {\r\n    return users.map((u: any) => {\r\n        if (u[objPropName] === userId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n};\r\n","import {UserType} from \"../types/Types\";\r\nimport {GetItemsType, instance} from \"./api\";\r\n\r\ntype GetUsersType = {\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType<UserType> & GetUsersType>(`users?page=${currentPage}&count=${pageSize}&term=${term}`+ (friend === null ? '' : `&friend=${friend}`)).then(res => res.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<ResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<ResponseType>\r\n    }\r\n}","import {updateObjectInArray} from \"../utils/object-helper\"\r\nimport {UserType} from \"../types/Types\"\r\nimport {BaseThunkType, InferActionsType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/users-api\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, //array of users ids\r\n    filter: {term: '', friend: null as null | boolean}\r\n}\r\n\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'BN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            };\r\n        case 'BN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            };\r\n\r\n        case 'BN/USERS/SET_USERS':\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case 'BN/USERS/SET_CURRENT_PAGE':\r\n            return {\r\n                ...state, currentPage: action.currentPage\r\n            }\r\n            case 'BN/USERS/SET_FILTER':\r\n                return {\r\n                    ...state, filter: action.payload\r\n                }\r\n        case 'BN/USERS/SET_TOTAL_USERS_COUNT':\r\n            return {\r\n                ...state, totalCount: action.totalCount\r\n            }\r\n        case 'BN/USERS/TOGGLE_IS_FETCHING':\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        case 'BN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.id]\r\n                    : state.followingInProgress.filter(id => id != action.id)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'BN/USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'BN/USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'BN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'BN/USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setFilter: (filter: FilterType) => ({type: 'BN/USERS/SET_FILTER', payload: filter} as const),\r\n    setTotalUsersCount: (totalCount: number) => ({type: 'BN/USERS/SET_TOTAL_USERS_COUNT', totalCount: totalCount} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'BN/USERS/TOGGLE_IS_FETCHING', isFetching} as const),\r\n    toggleFollowingProgress: (isFetching: boolean, id: number) => ({type: 'BN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, id} as const)\r\n}\r\n\r\nexport const usersRequest = (page: number, pageSize: number, filter: FilterType): ThunkType => async (dispatch: any) => {\r\n    dispatch(actions.toggleIsFetching(true));\r\n    dispatch(actions.setCurrentPage(page))\r\n    dispatch(actions.setFilter(filter))\r\n\r\n    let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend);\r\n    dispatch(actions.toggleIsFetching(false));\r\n    dispatch(actions.setUsers(data.items));\r\n    dispatch(actions.setTotalUsersCount(data.totalCount));\r\n}\r\n\r\nconst _followUnfollow = async (dispatch: Dispatch<ActionsType>, userId: number, apiMethod: any, actionCreator: (userId: number) => ActionsType) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n    let data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n    _followUnfollow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\r\n    _followUnfollow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\r\n}\r\n\r\n\r\nexport default usersReducer;\r\n\r\ntype InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true)\r\n})\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter\r\n}","import React, {useEffect} from 'react'\r\nimport {Paginator} from '../Common/Paginator/Paginator'\r\nimport User from './User'\r\nimport styles from './Users.module.css'\r\nimport {UsersSearchForm} from './UsersSearchForm'\r\nimport {usersRequest} from '../../redux/users-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {\r\n    getCurrentPage,\r\n    getFilter,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from '../../redux/users-selectors'\r\n\r\n\r\nexport const Users: React.FC = () => {\r\n    const users = useSelector(getUsers)\r\n    const totalItemsCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(()=> {\r\n        dispatch(usersRequest(currentPage, pageSize, filter))\r\n    }, [])\r\n\r\n    const onFilterChanged = () => {\r\n        dispatch(usersRequest(1, pageSize, filter))\r\n    }\r\n    const onPageChanged = () => {\r\n        dispatch(usersRequest(currentPage, pageSize, filter))\r\n    }\r\n    const follow = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n    return <div>\r\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n        <div className={styles.page}>\r\n            <Paginator totalItemsCount={totalItemsCount} pageSize={pageSize} currentPage={currentPage}\r\n                       onPageChanged={onPageChanged}/>\r\n        </div>\r\n        <div>{\r\n            users.map(u => <User user={u} followingInProgress={followingInProgress} follow={follow}\r\n                                 unfollow={unfollow} key={u.id}/>\r\n            )\r\n        }</div>\r\n\r\n    </div>\r\n}","import React from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {Users} from './Users'\r\nimport Preloader from '../Common/Preloader/Preloader'\r\nimport {getIsFetching} from '../../redux/users-selectors'\r\n\r\nexport const UsersPage: React.FC = () => {\r\n    const isFetching = useSelector(getIsFetching)\r\n    return <>\r\n        {isFetching ? <Preloader/> : null}\r\n        <Users />\r\n    </>\r\n}","import React from 'react'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {maxlengthCreator, required} from '../../utils/validators/validators'\r\nimport {createField, GetFormDataKeys, Input} from '../Common/FormsControl/FormsControl'\r\nimport {connect, useDispatch, useSelector} from 'react-redux'\r\nimport {LogIn} from '../../redux/auth-reducer'\r\nimport {Redirect} from 'react-router-dom'\r\nimport styles from '../Common/FormsControl/FormsControl.module.css'\r\nimport {AppStateType} from '../../redux/redux-store'\r\n\r\nconst maxLength50 = maxlengthCreator(50)\r\n\r\ntype LoginFormOwnProps = {\r\n    captcha: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormDataType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error, captcha}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        {createField<LoginFormDataKeysType>('Email', 'email', '', Input, [required, maxLength50])}\r\n        {createField<LoginFormDataKeysType>('Password', 'password', 'password', Input, [required, maxLength50])}\r\n        {createField<LoginFormDataKeysType>('', 'rememberMe', 'checkbox', Input, [], {}, 'Remember me')}\r\n        {captcha && <img src={captcha}/>}\r\n        {captcha && createField<LoginFormDataKeysType>('Type symbols from image', 'captcha', '', Input, [required])}\r\n        {error && <div className={styles.formCommonError}><span>{error}</span></div>}\r\n        <div>\r\n            <button>Login</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormDataType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\n\r\ntype LoginFormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormDataKeysType = GetFormDataKeys<LoginFormDataType>\r\n\r\nexport const Login: React.FC = () => {\r\n    const captcha = useSelector((state: AppStateType) => state.auth.captcha)\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: LoginFormDataType) => {\r\n        dispatch(LogIn(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n    if (isAuth) {\r\n        return <Redirect to='/profile'/>\r\n    }\r\n    return <div>\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captcha={captcha}/>\r\n    </div>\r\n}","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {InferActionsType} from \"./redux-store\";\r\n\r\nlet initialState: InitialStateType = {\r\n    initialized: false\r\n}\r\n\r\ntype InitialStateType = {\r\n    initialized: boolean\r\n}\r\ntype ActionsTypes = InferActionsType<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"BN/APP/INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'BN/APP/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\n\r\nexport const initializedApp = () => async (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n\r\n    Promise.all([promise])\r\n        .then(() => {dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\n\r\nexport default appReducer;","let initialState = {}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst sidebarReducer = (state = initialState, action: any): InitialStateType => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    messagePage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\nexport type InferActionsType<T> = T extends {[key: string]: (...args: any[])=> infer U}? U : never\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React from \"react\";\r\nimport Preloader from \"../components/Common/Preloader/Preloader\";\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<div><Preloader/></div>}>\r\n            <WrappedComponent {...props}/>\r\n        </React.Suspense>\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport {BrowserRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport {UsersPage} from \"./components/Users/UsersPage\";\r\nimport {Login} from \"./components/Login/Login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {initializedApp} from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/Common/Preloader/Preloader\";\r\nimport store, {AppStateType} from \"./redux/redux-store\";\r\nimport {withSuspense} from \"./hoc/WithSuspense\";\r\nimport {compose} from \"redux\";\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializedApp: () => void\r\n}\r\n\r\n\r\nconst WithSuspenseDialog = withSuspense(DialogsContainer)\r\nconst WithSuspenseProfile = withSuspense(ProfileContainer)\r\n\r\nclass App extends Component<DispatchPropsType & MapStatePropsType> {\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        alert('Some error occurred')\r\n    }\r\n    componentDidMount() {\r\n        this.props.initializedApp();\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <div>\r\n                <HeaderContainer/>\r\n                <div className='app_wrapper'>\r\n                    <Navbar/>\r\n                    <div className='app_wrapper_content'>\r\n                        <Switch>\r\n                            <Route exact path=\"/\" render={() => <Redirect to={\"/profile\"}/>}/>\r\n                            <Route path=\"/dialogs\" render={()=> <WithSuspenseDialog/>}/>\r\n                            <Route path=\"/profile/:userId?\" render={()=><WithSuspenseProfile/>}/>\r\n                            <Route path=\"/news\" render={() => <News/>}/>\r\n                            <Route path=\"/music\" render={() => <Music/>}/>\r\n                            <Route path=\"/settings\" render={() => <Settings/>}/>\r\n                            <Route path=\"/users\" render={() => <UsersPage/>}/>\r\n                            <Route path=\"/login\" render={() => <Login/>}/>\r\n                            <Route path=\"*\" render={()=><div>404 PAGE IS NOT FOUND</div>}/>\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nconst AppContainer = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializedApp}))(App);\r\n\r\nconst AppContainerWrap: React.FC = () => {\r\n    return <BrowserRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n}\r\nexport default AppContainerWrap;","import * as serviceWorker from './serviceWorker';\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport './index.css'\r\nimport AppContainerWrap from \"./App\";\r\n\r\nReactDOM.render(<AppContainerWrap/> , document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport preloader from '../../../assets/35.svg';\r\n\r\nconst Preloader = () => {\r\n    return  <div>\r\n                <img src={preloader}/>\r\n            </div>\r\n}\r\n\r\nexport default Preloader;","export type FormValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FormValidatorType = (value) => {\r\n    if(value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxlengthCreator = (maxLength: number): FormValidatorType => value => {\r\n    if(value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__vwzkT\",\"error\":\"FormsControl_error__Edfjy\",\"formCommonError\":\"FormsControl_formCommonError__38NaW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__1lNxt\",\"page\":\"Users_page__J1Lol\",\"paginator\":\"Users_paginator__1GOk7\",\"pageNumber\":\"Users_pageNumber__1FpJS\",\"selectedPage\":\"Users_selectedPage__3Xd78\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__3crIX\"};","import axios from \"axios\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': 'b5909740-3509-4631-bcbb-706cb7194cee'\r\n    }\r\n})\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    resultCode: RC\r\n    messages: Array<string>\r\n}\r\n\r\nexport type GetItemsType<ItemType> = {\r\n    items: Array<ItemType>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3Tfrn\",\"loginBlock\":\"Header_loginBlock__3K11K\"};"],"sourceRoot":""}