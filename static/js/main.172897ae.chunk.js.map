{"version":3,"sources":["components/Users/Users.module.css","api/profile-api.ts","redux/profile-reducer.ts","assets/userPhoto.png","redux/dialogs-reducer.ts","api/api.ts","assets/35.svg","serviceWorker.js","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Users/User.tsx","redux/users-selectors.ts","utils/object-helper.ts","api/users-api.ts","redux/users-reducer.ts","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Login/Login.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/WithSuspense.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/Common/FormsControl/FormsControl.tsx","components/Common/Preloader/Preloader.tsx","utils/validators/validators.ts","components/Common/FormsControl/FormsControl.module.css"],"names":["module","exports","profileAPI","userId","instance","get","then","res","data","status","put","file","formData","FormData","append","headers","profileData","initialState","posts","id","message","likesCount","profile","actions","addNewPost","newPostText","type","setUserProfile","setStatus","deletePost","postId","sendPhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","ResultCodesEnum","Success","sendPhoto","saveProfileData","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","filter","p","dialogs","name","addMessage","messageText","dialogsReducer","ResultCodeForCaptchaEnum","axios","create","withCredentials","baseURL","Boolean","window","location","hostname","match","News","props","Music","Settings","User","followingInProgress","follow","unfollow","user","to","className","styles","photo","src","small","userPhoto","followed","disabled","some","onClick","getUsers","createSelector","usersPage","users","u","getPageSize","pageSize","getTotalUsersCount","totalCount","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","getFilter","updateObjectInArray","objPropName","newObjProps","map","usersAPI","term","friend","post","delete","usersRequest","page","items","_followUnfollow","apiMethod","actionCreator","usersReducer","UserSearchFormValidate","values","UsersSearchForm","useSelector","enableReinitialize","initialValues","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","value","Users","totalItemsCount","history","useHistory","useDispatch","useEffect","parsed","queryString","search","substr","actualPage","actualFilter","Number","query","push","pathname","_follow","bind","_unfollow","showQuickJumper","defaultCurrent","total","onChange","pageNumber","key","UsersContainer","Preloader","authAPI","email","password","rememberMe","captcha","securityAPI","login","isAuth","payload","getAuthUserData","getCaptchaUrl","url","authReducer","maxLength50","maxlengthCreator","LoginReduxForm","reduxForm","form","handleSubmit","error","createField","Input","required","formCommonError","connect","LogIn","CaptchaIsRequired","length","initialized","appReducer","sidebarReducer","rootReducer","combineReducers","profilePage","messagePage","sidebar","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","Suspense","fallback","selectIsAuth","selectCurrentUserLogin","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","style","backgroundColor","width","icon","UserOutlined","color","DialogsContainer","React","lazy","ProfileContainer","Content","Sider","WithSuspenseDialog","WithSuspenseProfile","App","catchAllUnhandledErrors","e","alert","this","initializedApp","addEventListener","removeEventListener","defaultOpenKeys","height","borderRight","ProfileOutlined","MessageOutlined","UsergroupAddOutlined","BookOutlined","SlidersOutlined","SettingOutlined","padding","margin","minHeight","exact","path","render","Component","AppContainer","withRouter","promise","all","AppContainerWrap","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","Element","input","meta","touched","hasError","formControl","Textarea","placeholder","component","validators","text","preloader","maxLength"],"mappings":"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","file":"static/js/main.172897ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__1lNxt\",\"page\":\"Users_page__J1Lol\",\"pageNumber\":\"Users_pageNumber__1FpJS\",\"selectedPage\":\"Users_selectedPage__3Xd78\"};","import {ProfileType} from \"../types/Types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SendPhotoDataType = {\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data)\r\n    },\r\n    updateProfileStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data)\r\n    },\r\n    sendPhoto(file: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"Image\", file)\r\n        return instance.put<APIResponseType<SendPhotoDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    saveProfileData(profileData: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profileData).then(res => res.data)\r\n    }\r\n}","import {ResultCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostsType, ProfileType} from \"../types/Types\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport {BaseThunkType, InferActionsType} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hello, what is your name?', likesCount: 20},\r\n        {id: 2, message: 'Hi, my name is Bob', likesCount: 15}\r\n    ] as Array<PostsType>,\r\n    profile: null as ProfileType | null,\r\n    status: ''\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"BN/PROFILE/ADD-POST\":\r\n            let newPostText = {\r\n                id: 3,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n            ...state,\r\n                posts: [...state.posts, newPostText]\r\n            };\r\n        case \"BN/PROFILE/SET-USER-PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case \"BN/PROFILE/SET-STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case \"BN/PROFILE/DELETE_POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id != action.postId)\r\n            }\r\n        case \"BN/PROFILE/UPDATE-USER-PHOTO\":\r\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addNewPost: (newPostText: string) => ({ type: 'BN/PROFILE/ADD-POST', newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({ type: 'BN/PROFILE/SET-USER-PROFILE', profile } as const),\r\n    setStatus: (status: string) => ({ type: 'BN/PROFILE/SET-STATUS', status } as const),\r\n    deletePost: (postId: number) => ({ type: 'BN/PROFILE/DELETE_POST', postId } as const),\r\n    sendPhotoSuccess: (photos: PhotosType) =>({type: 'BN/PROFILE/UPDATE-USER-PHOTO', photos} as const)\r\n}\r\n\r\n\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n        dispatch(actions.setUserProfile(data));\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async(dispatch) => {\r\n    let data = await profileAPI.getStatus(userId);\r\n            dispatch(actions.setStatus(data))\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.updateProfileStatus(status);\r\n        if(data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(actions.setStatus(status));\r\n        }\r\n}\r\nexport const sendPhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.sendPhoto(file);\r\n    if(data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.sendPhotoSuccess(data.data.photos))\r\n    }\r\n}\r\nexport const saveProfileData = (profileData: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.id;\r\n    const data = await profileAPI.saveProfileData(profileData);\r\n\r\n    if(data.resultCode === ResultCodesEnum.Success) {\r\n        if(userId != null) {\r\n            dispatch(getUserProfile(userId));\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    }else{\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}))\r\n    return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","module.exports = __webpack_public_path__ + \"static/media/userPhoto.3d1c93dd.png\";","import {InferActionsType} from \"./redux-store\";\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Timur'},\r\n        {id: 2, name: 'Sasha'},\r\n        {id: 3, name: 'Pasha'}\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: 'hi'},\r\n        {id: 2, message: 'Yo'},\r\n        {id: 3, message: 'How are you doing'},\r\n    ]as Array<MessageType>\r\n}\r\n\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"BN/DIALOGS/ADD-MESSAGE\":\r\n            let messageText = action.messageText;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 4, message: messageText}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addMessage: (messageText: string) => ({type: 'BN/DIALOGS/ADD-MESSAGE', messageText} as const)\r\n}\r\n\r\n\r\nexport default dialogsReducer;\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>","import axios from \"axios\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': 'b5909740-3509-4631-bcbb-706cb7194cee'\r\n    }\r\n})\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    resultCode: RC\r\n    messages: Array<string>\r\n}\r\n\r\nexport type GetItemsType<ItemType> = {\r\n    items: Array<ItemType>\r\n}","module.exports = __webpack_public_path__ + \"static/media/35.5ee8137e.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport s from './News.module.css';\r\n\r\nconst News = (props: {}) => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from 'react';\r\n\r\nconst Music = (props: {}) => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\n\r\n\r\nconst Settings= (props: {}) => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import {NavLink} from \"react-router-dom\";\r\nimport styles from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/userPhoto.png\";\r\nimport React, {FC} from \"react\";\r\nimport {UserType} from \"../../types/Types\";\r\n\r\ntype PropsType = {\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    user: UserType\r\n}\r\n\r\nconst User: FC<PropsType> = ({followingInProgress, follow, unfollow, user}) => {\r\n    return (\r\n        <div>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={`profile/${user.id}`}>\r\n                        <img className={styles.photo}\r\n                             src={user.photos.small != null ? user.photos.small : userPhoto}/>\r\n                    </NavLink>\r\n\r\n                </div>\r\n                <div>\r\n                    {user.followed\r\n                        ? <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                            unfollow(user.id)\r\n                        }}>Unfollow </button>\r\n                        : <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                            follow(user.id)\r\n                        }}>Follow </button>\r\n                    }\r\n\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <span>\r\n                    <span>\r\n                        {user.name}\r\n                    </span>\r\n                    <div>\r\n                        {user.status}\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <div>\r\n                        {'user.location.country'},\r\n                    </div>\r\n                    <div>\r\n                        {'user.location.city'}\r\n                    </div>\r\n                </span>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true)\r\n})\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter\r\n}","export const updateObjectInArray = (users: any, userId: any, objPropName: any, newObjProps: any) => {\r\n    return users.map((u: any) => {\r\n        if (u[objPropName] === userId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n};\r\n","import {UserType} from \"../types/Types\";\r\nimport {GetItemsType, instance} from \"./api\";\r\nimport {FilterType} from '../redux/users-reducer'\r\n\r\ntype GetUsersType = {\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType<UserType> & GetUsersType>(`users?page=${currentPage}&count=${pageSize}&term=${term}`+ (friend === null ? '' : `&friend=${friend}`)).then(res => res.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<ResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<ResponseType>\r\n    }\r\n}","import {updateObjectInArray} from '../utils/object-helper'\r\nimport {UserType} from '../types/Types'\r\nimport {BaseThunkType, InferActionsType} from './redux-store'\r\nimport {Dispatch} from 'redux'\r\nimport {usersAPI} from '../api/users-api'\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, //array of users ids\r\n    filter: {\r\n        term: '',\r\n        friend: null as boolean | null\r\n    }\r\n}\r\n\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'BN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        case 'BN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n\r\n        case 'BN/USERS/SET_USERS':\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case 'BN/USERS/SET_CURRENT_PAGE':\r\n            return {\r\n                ...state, currentPage: action.currentPage\r\n            }\r\n        case 'BN/USERS/SET_TOTAL_USERS_COUNT':\r\n            return {\r\n                ...state, totalCount: action.totalCount\r\n            }\r\n        case 'BN/USERS/TOGGLE_IS_FETCHING':\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        case 'BN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.id]\r\n                    : state.followingInProgress.filter(id => id != action.id)\r\n            }\r\n            case 'BN/USERS/SET_FILTER':\r\n            return {\r\n                ...state, filter: action.filter\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'BN/USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'BN/USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'BN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'BN/USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setFilter: (filter: FilterType) => ({type: 'BN/USERS/SET_FILTER', filter} as const),\r\n    setTotalUsersCount: (totalCount: number) => ({type: 'BN/USERS/SET_TOTAL_USERS_COUNT', totalCount: totalCount} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'BN/USERS/TOGGLE_IS_FETCHING', isFetching} as const),\r\n    toggleFollowingProgress: (isFetching: boolean, id: number) => ({type: 'BN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, id} as const)\r\n}\r\n\r\nexport const usersRequest = (page: number, pageSize: number, filter: FilterType): ThunkType => async (dispatch: any) => {\r\n    dispatch(actions.toggleIsFetching(true))\r\n    dispatch(actions.setCurrentPage(page))\r\n\r\n    let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\r\n    dispatch(actions.setFilter(filter))\r\n    dispatch(actions.toggleIsFetching(false))\r\n    dispatch(actions.setUsers(data.items))\r\n    dispatch(actions.setTotalUsersCount(data.totalCount))\r\n}\r\n\r\nconst _followUnfollow = async (dispatch: Dispatch<ActionsType>, userId: number, apiMethod: any, actionCreator: (userId: number) => ActionsType) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId))\r\n    let data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId))\r\n}\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n    _followUnfollow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\r\n    _followUnfollow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\r\n}\r\n\r\n\r\nexport default usersReducer\r\n\r\ntype InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Field, Form, Formik} from 'formik'\r\nimport React from 'react'\r\nimport {FilterType} from '../../redux/users-reducer'\r\nimport {useSelector} from 'react-redux'\r\nimport {getFilter} from '../../redux/users-selectors'\r\n\r\nconst UserSearchFormValidate = (values: any) => {\r\n    const errors = {}\r\n    return errors\r\n}\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = (props) => {\r\n    const filter = useSelector(getFilter)\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        }\r\n\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return <Formik\r\n        enableReinitialize\r\n        initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n        validate={UserSearchFormValidate}\r\n        onSubmit={submit}\r\n    >\r\n        {({isSubmitting}) => (\r\n            <Form>\r\n                <Field type='text' name='term'/>\r\n                <Field name='friend' as='select'>\r\n                    <option value='null'>All</option>\r\n                    <option value='true'>Only followed</option>\r\n                    <option value='false'>Only unfollowed</option>\r\n                </Field>\r\n                <button type=\"submit\" disabled={isSubmitting}>\r\n                    Find\r\n                </button>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n}","import React, {useEffect} from 'react'\r\nimport {Paginator} from '../Common/Paginator/Paginator'\r\nimport User from './User'\r\nimport styles from './Users.module.css'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {\r\n    getCurrentPage, getFilter,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from '../../redux/users-selectors'\r\nimport {FilterType, follow, unfollow, usersRequest} from '../../redux/users-reducer'\r\nimport {UsersSearchForm} from './UsersSearchForm'\r\nimport { useHistory } from 'react-router-dom'\r\nimport * as queryString from 'querystring'\r\nimport {Pagination} from 'antd'\r\n\r\ntype QueryParamsType = { term?: string, friend?: string, page?: string }\r\nlet Users: React.FC = () => {\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const totalItemsCount = useSelector(getTotalUsersCount)\r\n    const pageSize = useSelector(getPageSize)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n    const users = useSelector(getUsers)\r\n    const filter = useSelector(getFilter)\r\n    const history = useHistory()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n        if(parsed.page) actualPage = Number(parsed.page)\r\n        if(!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n        if(!!parsed.friend) actualFilter = {...actualFilter, friend: parsed.friend === 'null' ? null : parsed.friend === 'true' ? true : false}\r\n\r\n        dispatch(usersRequest(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n    useEffect(()=>{\r\n        const query: QueryParamsType = {}\r\n        if(!!filter.term) query.term = filter.term\r\n        if(filter.friend !== null) query.friend = String(filter.friend)\r\n        if(currentPage !==1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(query)\r\n        })\r\n    },[filter, currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(usersRequest(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(usersRequest(1, pageSize, filter))\r\n    }\r\n    const _follow = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n    const _unfollow = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n    return <div>\r\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n        <div className={styles.page}>\r\n            <Pagination showQuickJumper defaultCurrent={1} pageSize={pageSize} total={totalItemsCount} onChange={onPageChanged} />\r\n        </div>\r\n        <div>{\r\n            users.map(u => <User user={u}\r\n                                 key={u.id}\r\n                                 followingInProgress={followingInProgress}\r\n                                 follow={_follow}\r\n                                 unfollow={_unfollow}\r\n                                 />\r\n            )\r\n        }</div>\r\n\r\n    </div>\r\n}\r\n\r\nexport default Users","import React from 'react'\r\nimport Users from './Users'\r\nimport Preloader from '../Common/Preloader/Preloader'\r\nimport {useSelector} from 'react-redux'\r\nimport {getIsFetching} from '../../redux/users-selectors'\r\n\r\nexport const UsersContainer: React.FC = () => {\r\n\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return <>\r\n        {isFetching ? <Preloader/> : null}\r\n        <Users />\r\n    </>\r\n\r\n\r\n}","import {APIResponseType, instance, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n        id: number\r\n        email: string\r\n        login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    id: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    logIn(email: string, password: string, rememberMe: boolean, captcha: string) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data)\r\n    },\r\n    logOut() {\r\n        return instance.delete<APIResponseType>(`auth/login`).then(res => res.data)\r\n    }\r\n}","import {instance} from \"./api\";\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<{url: string}>(`security/get-captcha-url`).then(res => res.data)\r\n\r\n    }\r\n}","import {ResultCodesEnum, ResultCodeForCaptchaEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\nimport {BaseThunkType, InferActionsType} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captcha: null as string | null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"BN/auth/SET_USER_DATA\":\r\n        case \"BN/auth/GET_CAPTCHA_URL_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (id: number| null, email: string| null, login: string| null, isAuth: boolean) => ({type: 'BN/auth/SET_USER_DATA', payload: {id, email, login, isAuth}} as const),\r\n    getCaptchaUrlSuccess: (captcha: string) => ({type: 'BN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captcha}} as const)\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.me();\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        let {id, email, login} = data.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const LogIn = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.logIn(email, password, rememberMe, captcha);\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(getAuthUserData());\r\n    } else{\r\n        if(data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n\r\n    }\r\n\r\nexport const LogOut = (): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.logOut();\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl();\r\n    dispatch(actions.getCaptchaUrlSuccess(data.url))\r\n}\r\n\r\n\r\nexport default authReducer;\r\n\r\ntype InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","import React from 'react'\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxlengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {createField, GetFormDataKeys, Input} from \"../Common/FormsControl/FormsControl\";\r\nimport {connect} from \"react-redux\";\r\nimport {LogIn} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport styles from \"../Common/FormsControl/FormsControl.module.css\"\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nconst maxLength50 = maxlengthCreator(50)\r\n\r\ntype LoginFormOwnProps = {\r\n    captcha: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormDataType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error, captcha}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        {createField<LoginFormDataKeysType>('Email', \"email\", '', Input, [required, maxLength50])}\r\n        {createField<LoginFormDataKeysType>('Password', 'password', 'password', Input, [required, maxLength50])}\r\n        {createField<LoginFormDataKeysType>('', 'rememberMe', 'checkbox', Input, [], {}, 'Remember me')}\r\n        {captcha && <img src={captcha}/>}\r\n        {captcha && createField<LoginFormDataKeysType>('Type symbols from image', 'captcha', '', Input, [required])}\r\n        {error && <div className={styles.formCommonError}><span>{error}</span></div>}\r\n        <div>\r\n            <button>Login</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormDataType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\n\r\ntype MapStatePropsType = {\r\n    captcha: string | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    LogIn: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\ntype LoginFormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormDataKeysType = GetFormDataKeys<LoginFormDataType>\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n    const onSubmit = (formData: LoginFormDataType) => {\r\n        props.LogIn(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to='/profile'/>\r\n    }\r\n    return <div>\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captcha={props.captcha}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    captcha: state.auth.captcha,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {LogIn})(Login)","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {InferActionsType} from \"./redux-store\";\r\n\r\nlet initialState: InitialStateType = {\r\n    initialized: false\r\n}\r\n\r\ntype InitialStateType = {\r\n    initialized: boolean\r\n}\r\ntype ActionsTypes = InferActionsType<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"BN/APP/INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'BN/APP/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\n\r\nexport const initializedApp = () => async (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n\r\n    Promise.all([promise])\r\n        .then(() => {dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\n\r\nexport default appReducer;","let initialState = {}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst sidebarReducer = (state = initialState, action: any): InitialStateType => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    messagePage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\nexport type InferActionsType<T> = T extends {[key: string]: (...args: any[])=> infer U}? U : never\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React from \"react\";\r\nimport Preloader from \"../components/Common/Preloader/Preloader\";\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<div><Preloader/></div>}>\r\n            <WrappedComponent {...props}/>\r\n        </React.Suspense>\r\n    }\r\n}","import {AppStateType} from './redux-store'\r\n\r\nexport const selectIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\nexport const selectCurrentUserLogin = (state: AppStateType) => {\r\n    return state.auth.login\r\n}\r\n","import React from 'react'\r\n\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {Link} from 'react-router-dom'\r\nimport {selectCurrentUserLogin, selectIsAuth} from '../../redux/auth-selectors'\r\nimport {UserOutlined} from '@ant-design/icons'\r\nimport {LogOut} from '../../redux/auth-reducer'\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from 'antd'\r\n\r\n\r\nexport const Header: React.FC = () => {\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const login = useSelector(selectCurrentUserLogin)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logout = () => {\r\n        dispatch(LogOut())\r\n    }\r\n    const {Header} = Layout\r\n    return <Header className=\"header\">\r\n        <div className=\"logo\"/>\r\n        <Row>\r\n            <Col span={18}>\r\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\r\n                    <Menu.Item key='1' style={{backgroundColor: 'inherit'}}>\r\n                        <Link to='/profile'><img src='https://lofrev.net/wp-content/photos/2017/03/bower_logo_1.png'\r\n                                                 style={{width: '40px'}}/></Link>\r\n                    </Menu.Item>\r\n                </Menu>\r\n            </Col>\r\n\r\n            {isAuth\r\n                ? <><Col span={1}>\r\n                    <Avatar style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}></Avatar>\r\n                </Col>\r\n                    <Col span={1} style={{color: '#fff'}}>\r\n                        {login}\r\n                    </Col>\r\n                    <Col span={3}>\r\n                        <Button onClick={logout}>Log out</Button>\r\n                    </Col></>\r\n                : <Col span={6}>\r\n                    <Button><Link to={'/login'}>Login</Link></Button>\r\n                </Col>}\r\n        </Row>\r\n    </Header>\r\n}","import React, {Component} from 'react'\r\nimport {BrowserRouter, Link, Redirect, Route, Switch, withRouter} from 'react-router-dom'\r\nimport News from './components/News/News'\r\nimport Music from './components/Music/Music'\r\nimport Settings from './components/Settings/Settings'\r\nimport {UsersContainer} from './components/Users/UsersContainer'\r\nimport Login from './components/Login/Login'\r\nimport {connect, Provider} from 'react-redux'\r\nimport {initializedApp} from './redux/app-reducer'\r\nimport Preloader from './components/Common/Preloader/Preloader'\r\nimport store, {AppStateType} from './redux/redux-store'\r\nimport {withSuspense} from './hoc/WithSuspense'\r\nimport {compose} from 'redux'\r\nimport {Header} from './components/Header/Header'\r\nimport {Layout, Menu} from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport {ProfileOutlined, MessageOutlined, UsergroupAddOutlined, BookOutlined, SlidersOutlined, SettingOutlined} from '@ant-design/icons'\r\n\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializedApp: () => void\r\n}\r\n\r\nconst {Content, Sider} = Layout;\r\n\r\nconst WithSuspenseDialog = withSuspense(DialogsContainer)\r\nconst WithSuspenseProfile = withSuspense(ProfileContainer)\r\n\r\nclass App extends Component<DispatchPropsType & MapStatePropsType> {\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        alert('Some error occurred')\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializedApp()\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <Layout>\r\n                <Header/>\r\n                <Layout>\r\n                    <Sider width={200} className=\"site-layout-background\">\r\n                        <Menu mode=\"inline\" defaultSelectedKeys={['2']} defaultOpenKeys={['sub1']}\r\n                              style={{height: '100%', borderRight: 0}}>\r\n                            <Menu.Item key=\"1\" icon={<ProfileOutlined/>} style={{}}><Link to=\"/profile\">Profile</Link></Menu.Item>\r\n                            <Menu.Item key=\"2\" icon={<MessageOutlined/>}><Link to=\"/dialogs\">Messages</Link></Menu.Item>\r\n                            <Menu.Item key=\"3\" icon={<UsergroupAddOutlined/>}><Link to=\"/users\">Users</Link></Menu.Item>\r\n                            <Menu.Item key=\"4\" icon={<BookOutlined/>}><Link to=\"/news\">News</Link></Menu.Item>\r\n                            <Menu.Item key=\"5\" icon={<SlidersOutlined/>}><Link to=\"/music\">Music</Link></Menu.Item>\r\n                            <Menu.Item key=\"6\" icon={<SettingOutlined/>}><Link to=\"/settings\">Settings</Link></Menu.Item>\r\n                        </Menu>\r\n                    </Sider>\r\n                    <Layout style={{padding: '0 24px 24px'}}>\r\n                        <Content className=\"site-layout-background\" style={{padding: 24, margin: 0, minHeight: 280}}>\r\n                            <Switch>\r\n                                <Route exact path=\"/\" render={() => <Redirect to={'/profile'}/>}/>\r\n                                <Route path=\"/dialogs\" render={() => <WithSuspenseDialog/>}/>\r\n                                <Route path='/profile/:userId?' render={() => <WithSuspenseProfile/>}/>\r\n                                <Route path=\"/news\" render={() => <News/>}/>\r\n                                <Route path=\"/music\" render={() => <Music/>}/>\r\n                                <Route path=\"/settings\" render={() => <Settings/>}/>\r\n                                <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n                                <Route path=\"/login\" render={() => <Login/>}/>\r\n                                <Route path=\"*\" render={() => <div>404 PAGE IS NOT FOUND</div>}/>\r\n                            </Switch>\r\n                        </Content>\r\n                    </Layout>\r\n                </Layout>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nconst AppContainer = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializedApp}))(App)\r\n\r\nconst AppContainerWrap: React.FC = () => {\r\n    return <BrowserRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n}\r\nexport default AppContainerWrap","import * as serviceWorker from './serviceWorker';\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport './index.css'\r\nimport AppContainerWrap from \"./App\";\r\n\r\nReactDOM.render(<AppContainerWrap/> , document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from \"react\";\r\nimport styles from './FormsControl.module.css'\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\nimport {FormValidatorType} from \"../../../utils/validators/validators\";\r\n\r\nconst Element = (Element: React.FC | string): React.FC<WrappedFieldProps> => ({input, meta: {touched, error}, ...props}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <Element {...input} {...props}/>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea = Element('textarea')\r\n\r\nexport const Input = Element('input')\r\n\r\nexport function createField<FormKeys extends string> (placeholder: string | undefined, name: FormKeys, type: string, component: React.FC<WrappedFieldProps>, validators: Array<FormValidatorType>, props={}, text ='') {\r\n    return(\r\n        <div> {text}\r\n            <Field placeholder={placeholder} name={name} type={type} component={component} validators={validators}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport type GetFormDataKeys<T> = Extract<keyof T, string>","import React from 'react';\r\nimport preloader from '../../../assets/35.svg';\r\n\r\nconst Preloader = () => {\r\n    return  <div>\r\n                <img src={preloader}/>\r\n            </div>\r\n}\r\n\r\nexport default Preloader;","export type FormValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FormValidatorType = (value) => {\r\n    if(value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxlengthCreator = (maxLength: number): FormValidatorType => value => {\r\n    if(value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__vwzkT\",\"error\":\"FormsControl_error__Edfjy\",\"formCommonError\":\"FormsControl_formCommonError__38NaW\"};"],"sourceRoot":""}