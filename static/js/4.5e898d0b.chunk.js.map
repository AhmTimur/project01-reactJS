{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/MessageItem/MessageItem.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","className","s","dialogs","active","dialogImage","src","photo","to","id","name","MessageItem","messagesItems","message","maxLength100","maxlengthCreator","DialogAddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","Input","required","Dialogs","dialogElement","map","d","key","messageElement","messages","m","search","type","placeholder","dialogsItems","dispatchMessage","values","addMessage","messageText","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","messagePage","actions","WrappedComponent","restProps"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,cAAgB,+BAA+B,YAAc,6BAA6B,gBAAkB,mC,wHCYtSC,EAP0C,SAACC,GACtD,OAAO,yBAAKC,UAAWC,IAAEC,QAAU,IAAMD,IAAEE,QACvC,yBAAKH,UAAWC,IAAEG,YAAaC,IAAKC,MACpC,kBAAC,IAAD,CAASC,GAAI,WAAaR,EAAMS,IAAKT,EAAMU,QCCpCC,EAPkC,SAACX,GAE9C,OAAO,yBAAKC,UAAWC,IAAEU,eACpBZ,EAAMa,U,yBCDTC,EAAeC,YAAiB,KAkBzBC,EAA4BC,YAA8B,CAACC,KAAM,yBAArCD,EAXsD,SAACjB,GAC5F,OAAO,0BAAMmB,SAAUnB,EAAMoB,cACzB,6BACKC,YAAwC,qBAAsB,cAAe,GAAIC,IAAO,CAACC,IAAUT,KAExG,6BACI,qDC4BGU,EA3BqD,SAACxB,GACjE,IAAIyB,EAAgBzB,EAAMG,QAAQA,QAAQuB,KAAM,SAAAC,GAAC,OAAK,kBAAC,EAAD,CAAYC,IAAKD,EAAElB,GAAIC,KAAMiB,EAAEjB,KAAMD,GAAIkB,EAAElB,QAC7FoB,EAAiB7B,EAAMG,QAAQ2B,SAASJ,KAAM,SAAAK,GAAC,OAAK,kBAAC,EAAD,CAAaH,IAAKG,EAAEtB,GAAII,QAASkB,EAAElB,aAK3F,OACI,yBAAKZ,UAAWC,IAAEC,SACd,yBAAKF,UAAWC,IAAE8B,QACd,2BAAOC,KAAK,OAAOC,YAAY,YAEnC,yBAAKjC,UAAWC,IAAEiC,cACbV,EACD,yBAAKxB,UAAWC,IAAEkC,iBAClB,yBAAKnC,UAAWC,IAAE4B,UACbD,GAEL,kBAACb,EAAD,CAA2BG,SAfnB,SAACkB,GAEjBrC,EAAMsC,WAAWD,EAAOE,oB,yBCnB5BC,EAA6B,SAACC,GAAD,MAAyB,CACtDC,OAAQD,EAAME,KAAKD,S,WCQRE,sBACXC,aAPoB,SAACJ,GACrB,MAAO,CACHtC,QAASsC,EAAMK,eAKZ,eAAsBC,ODF1B,SAA+BC,GAUlC,OAFqCH,YAA6CL,EAA7CK,EANa,SAAC7C,GAAW,IACrD0C,EAAwB1C,EAAxB0C,OAAWO,EADyC,YAC5BjD,EAD4B,YAEzD,OAAK0C,EACE,kBAACM,EAAqBC,GADT,kBAAC,IAAD,CAAUzC,GAAG,gBCH1BoC,CAGbpB","file":"static/js/4.5e898d0b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2oy1V\",\"search\":\"Dialogs_search__353Zl\",\"dialogsItems\":\"Dialogs_dialogsItems__1YJOQ\",\"active\":\"Dialogs_active__3BflE\",\"messages\":\"Dialogs_messages__1GgrT\",\"messagesItems\":\"Dialogs_messagesItems__2N39b\",\"dialogImage\":\"Dialogs_dialogImage__2Vu3N\",\"dispatchMessage\":\"Dialogs_dispatchMessage__3Cjia\"};","import React from 'react';\r\nimport s from '../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport photo from \"./../../../assets/userPhoto.png\"\r\n\r\n\r\nconst DialogItem: React.FC<{name: string, id: number}> = (props) => {\r\n    return <div className={s.dialogs + ' ' + s.active}>\r\n        <img className={s.dialogImage} src={photo} />\r\n        <NavLink to={'/dialog/' + props.id}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from '../Dialogs.module.css';\r\n\r\nconst MessageItem: React.FC<{message: string}> = (props) => {\r\n\r\n    return <div className={s.messagesItems}>\r\n        {props.message}\r\n    </div>\r\n}\r\n\r\nexport default MessageItem;","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {createField, Input} from \"../Common/FormsControl/FormsControl\";\r\nimport {maxlengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nconst maxLength100 = maxlengthCreator(100)\r\n\r\ntype NewMessageFormType = {\r\n    messageText: string\r\n}\r\ntype PropsType = {} // для запоминания структуры InjectedProps или для примера\r\ntype AddMessageFormDataKeysType = Extract<keyof NewMessageFormType, string>\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType, PropsType> & PropsType> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            {createField<AddMessageFormDataKeysType>('Write your message', \"messageText\", '', Input, [required, maxLength100])}\r\n        </div>\r\n        <div>\r\n            <button>Send message</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const DialogAddMessageFormRedux = reduxForm<NewMessageFormType>({form: 'dialogsAddMessageForm'})(AddMessageForm)","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport MessageItem from \"./MessageItem/MessageItem\";\r\nimport {InjectedFormProps} from \"redux-form\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {DialogAddMessageFormRedux} from \"./AddMessageForm\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogs: InitialStateType\r\n    isAuth: boolean\r\n    messageText: string\r\n}\r\ntype DispatchStatePropsType = {\r\n    addMessage: (messageText: string)=> void\r\n}\r\ntype PropsType = MapStatePropsType & DispatchStatePropsType\r\n\r\nconst Dialogs: React.FC<InjectedFormProps<PropsType> & PropsType> = (props) => {\r\n    let dialogElement = props.dialogs.dialogs.map ( d => (<DialogItem key={d.id} name={d.name} id={d.id}/>));\r\n    let messageElement = props.dialogs.messages.map ( m => (<MessageItem key={m.id} message={m.message}/>));\r\n    let addNewMessage = (values: {messageText: string}) => {\r\n        debugger\r\n        props.addMessage(values.messageText)\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.search}>\r\n                <input type=\"text\" placeholder='search'/>\r\n            </div>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElement}\r\n                <div className={s.dispatchMessage}>\r\n                <div className={s.messages}>\r\n                    {messageElement}\r\n                </div>\r\n                <DialogAddMessageFormRedux onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType)=> ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\ntype mapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType) {\r\n\r\n    const RedirectComponent: React.FC<mapPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<mapPropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","import React from 'react';\r\nimport {actions} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogs: state.messagePage\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n)(Dialogs) as React.ComponentType"],"sourceRoot":""}